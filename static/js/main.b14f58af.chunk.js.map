{"version":3,"sources":["components/useJsonFetch.js","components/HookJsonFetch.js","App.js","serviceWorker.js","index.js"],"names":["useJsonFetch","url","opts","useState","data","setData","loading","setLoading","error","setError","useEffect","a","fetch","response","ok","Error","statusText","json","fetchData","HookJsonFetch","className","status","App","process","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOA2BeA,EAzBM,SAACC,EAAKC,GAAU,IAAD,EACVC,mBAAS,MADC,mBAC3BC,EAD2B,KACrBC,EADqB,OAEJF,oBAAS,GAFL,mBAE3BG,EAF2B,KAElBC,EAFkB,OAGRJ,mBAAS,MAHD,mBAG3BK,EAH2B,KAGpBC,EAHoB,KAsBlC,OAjBAC,qBAAU,YACO,uCAAG,8BAAAC,EAAA,6DAChBJ,GAAW,GADK,kBAGSK,MAAMX,GAHf,WAGRY,EAHQ,QAIAC,GAJA,sBAIU,IAAIC,MAAMF,EAASG,YAJ7B,uBAKKH,EAASI,OALd,OAKRb,EALQ,OAMdC,EAAQD,GACRK,EAAS,MAPK,kDASdA,EAAS,EAAD,IATM,yBAWdF,GAAW,GAXG,6EAAH,qDAcfW,KACC,CAACjB,IACG,CAACG,EAAME,EAASE,ICVVW,MAXf,YAAiC,IAARlB,EAAO,EAAPA,IAAO,EACCD,EAAaC,GADd,mBACvBG,EADuB,KACjBE,EADiB,KACRE,EADQ,KAE9B,OACE,yBAAKY,UAAU,cACZhB,GAAQ,2BAAIA,EAAKiB,QACjBf,GAAW,sCACXE,GAAS,sCCSDc,MAdf,WACE,OACE,yBAAKF,UAAU,OACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,eACb,kBAAC,EAAD,CAAenB,IAAKsB,+BACpB,kBAAC,EAAD,CAAetB,IAAKsB,gCACpB,kBAAC,EAAD,CAAetB,IAAKsB,sCCCVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b14f58af.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useJsonFetch = (url, opts) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch(url);\n        if (!response.ok) throw new Error(response.statusText);\n        const data = await response.json();\n        setData(data);\n        setError(null);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [url]);\n  return [data, loading, error];\n};\n\nexport default useJsonFetch;\n","import React from \"react\";\nimport useJsonFetch from \"./useJsonFetch\";\n\nfunction HookJsonFetch({ url }) {\n  const [data, loading, error] = useJsonFetch(url);\n  return (\n    <div className=\"ui segment\">\n      {data && <p>{data.status}</p>}\n      {loading && <p>Loading</p>}\n      {error && <p>Error</p>}\n    </div>\n  );\n}\n\nexport default HookJsonFetch;\n","import React from \"react\";\nimport \"./App.css\";\nimport HookJsonFetch from \"./components/HookJsonFetch\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"ui container\">\n        <div className=\"ui segments\">\n          <HookJsonFetch url={process.env.REACT_APP_DATA_URL} />\n          <HookJsonFetch url={process.env.REACT_APP_ERROR_URL} />\n          <HookJsonFetch url={process.env.REACT_APP_LOADING_URL} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}